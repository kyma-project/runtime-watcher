name: TestSuite E2E

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  wait-for-img:
    name: "Wait for Image Build"
    runs-on: ubuntu-latest
    steps:
      - uses: autotelic/action-wait-for-status-check@v1
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Context for which we should look for the matching status
          statusName: ${{ (github.event_name == 'pull_request') && 'pull-runtime-watcher-img-build' || 'main-runtime-watcher-build' }}
          timeoutSeconds: 900
          intervalSeconds: 10
      - name: Exit If Failing Build Requirement
        if: steps.wait-for-build.outputs.state != 'success'
        run: |
          echo "Image build did not succeed, skipping E2E Test!"
          exit 1

  e2e-integration:
    name: "E2E"
    needs: [wait-for-img]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      K3D_VERSION: v5.4.7
      ISTIO_VERSION: 1.17.1
      CM_VERSION: v1.12.3
      VERSION_TAG: latest
      IMAGE_REPO: prod
      GOSUMDB: off
    steps:
      - name: Install prerequisites
        run: |
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt update -y
          sudo apt install kubectl -y
      - name: Checkout runtime-watcher
        uses: actions/checkout@v4
        with:
          path: runtime-watcher
      - name: Set up Go
        uses: actions/setup-go@v4
        run: go version
        with:
          go-version-file: 'runtime-watcher/runtime-watcher/go.mod'
          cache-dependency-path: 'runtime-watcher/runtime-watcher/go.sum'
      - name: Install Istio CLI
        run: |
          curl -L https://istio.io/downloadIstio | TARGET_ARCH=x86_64 sh -
          chmod +x istio-$ISTIO_VERSION/bin/istioctl
          mv istio-$ISTIO_VERSION/bin/istioctl /usr/local/bin
      - name: Install Kyma CLI
        run: |
          wget https://storage.googleapis.com/kyma-cli-unstable/kyma-linux
          chmod +x kyma-linux && mv kyma-linux /usr/local/bin/kyma-unstable
          echo "PATH=/usr/local/bin/kyma-unstable" >> $GITHUB_OUTPUT
      - run: ln -s /usr/local/bin/kyma-unstable /usr/local/bin/kyma
      - name: Install Cert Manager Command Line Tool
        run: |
          OS=$(go env GOOS); ARCH=$(go env GOARCH); curl -fsSL -o cmctl.tar.gz https://github.com/cert-manager/cert-manager/releases/latest/download/cmctl-$OS-$ARCH.tar.gz
          tar xzf cmctl.tar.gz
          sudo mv cmctl /usr/local/bin
      - name: Install k3d
        run: wget -qO - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=$K3D_VERSION bash
      - name: Provision SKR cluster
        run: |
          k3d cluster create skr -p 10080:80@loadbalancer -p 10443:443@loadbalancer --k3s-arg '--disable=traefik@server:0'
      - name: Provision KCP cluster
        run: |
          kyma provision k3d --name=kcp -p 9443:443@loadbalancer -p 9080:80@loadbalancer -p 9081:8080@loadbalancer --ci --registry-port 5111
      - name: Update Kubeconfigs
        run: k3d kubeconfig merge -a -d
      - name: Export required Kubeconfig Env vars
        run: |
          echo "KCP_KUBECONFIG=$(k3d kubeconfig write kcp)" >> $GITHUB_ENV
          echo "SKR_KUBECONFIG=$(k3d kubeconfig write skr)" >> $GITHUB_ENV
      - name: Patch /etc/hosts
        run: |
          FILE=/etc/hosts
          if [ -f "$FILE" ]; then
              sudo echo "127.0.0.1 k3d-kcp-registry" | sudo tee -a $FILE
          else
              echo "$FILE does not exist."
              exit 1
          fi
          echo "/etc/hosts file patched"
      - name: Switch kubeconfig context to KCP cluster
        run: kubectl config use-context k3d-kcp
      - name: Deploy Istio on KCP Cluster
        run: |
          istioctl install --set profile=demo -y
      - name: Deploy Cert Manager on KCP Cluster
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/$CM_VERSION/cert-manager.yaml
          cmctl check api --wait=2m
      - name: Override Kustomize Controller Image TAG and Image repository environment variables in Pull Request to PR Image
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          pwd
          echo "VERSION_TAG=PR-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "IMAGE_REPO=dev" >> $GITHUB_ENV
      - name: Patch watcher image
        working-directory: lifecycle-manager
        run: |
          pwd
          pushd config/watcher_local_test
          pwd
          echo \
          "- op: add
            path: /spec/template/spec/containers/0/args/-
            value: --watcher-dev-registry=true
          - op: add
            path: /spec/template/spec/containers/0/args/-
            value: --skr-watcher-image-tag=$VERSION_TAG" >> patch_watcher_img.yaml
          cat patch_watcher_img.yaml
          kustomize edit add patch --path patch_watcher_img.yaml --kind Deployment
          popd
      - name: Deploy lifecycle-manager
        working-directory: lifecycle-manager
        run: |
          pwd
          maxRetry=5
          for retry in $(seq 1 $maxRetry)
          do
            if make local-deploy-with-watcher IMG=europe-docker.pkg.dev/kyma-project/$IMAGE_REPO/lifecycle-manager:latest; then
              echo "KLM deployed successfully"
              exit 0
            elif [[ $retry -lt $maxRetry ]]; then
              echo "Deploy encountered some error, will retry after 20 seconds"
              sleep 20
            else
              echo "KLM deployment failed"
              exit 1
            fi
          done
      - name: Checkout template-operator
        uses: actions/checkout@v4
        with:
          repository: kyma-project/template-operator
          path: template-operator
      - name: Run e2e tests
        working-directory: runtime-watcher
        run: |
          pwd
          make -C tests/e2e ${{ matrix.e2e-test }}
